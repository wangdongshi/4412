diff -ruN u-boot-2018.07/arch/arm/dts/exynos4412-x4412.dts u-boot-x4412/arch/arm/dts/exynos4412-x4412.dts
--- u-boot-2018.07/arch/arm/dts/exynos4412-x4412.dts	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/arch/arm/dts/exynos4412-x4412.dts	2018-09-25 18:52:51.902046210 +0800
@@ -0,0 +1,252 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Odroid-U3/X2 board device tree source
+ *
+ * Copyright (c) 2014 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ */
+
+/dts-v1/;
+#include "exynos4412.dtsi"
+
+/ {
+	model = "X4412 based on Exynos4412";
+	compatible = "samsung,x4412", "samsung,exynos4412";
+
+	aliases {
+		serial0 = "/serial@13800000";
+		console = "/serial@13810000";
+		mmc0 = &mshc_0;
+		mmc1 = &sdhci2;
+	};
+
+	serial@13810000 {
+		status = "okay";
+	};
+
+	ehci@12580000 {
+		compatible = "samsung,exynos-ehci";
+		reg = <0x12580000 0x100>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		phy {
+			compatible = "samsung,exynos-usb-phy";
+			reg = <0x125B0000 0x100>;
+		};
+	};
+
+	emmc-reset {
+		compatible = "samsung,emmc-reset";
+		reset-gpio = <&gpk1 2 0>;
+	};
+};
+
+&i2c_0 {
+	samsung,i2c-sda-delay = <100>;
+	samsung,i2c-slave-addr = <0x10>;
+	samsung,i2c-max-bus-freq = <100000>;
+	status = "okay";
+
+	max77686: max77686_pmic@09 {
+		compatible = "maxim,max77686";
+		interrupt-parent = <&gpx3>;
+		interrupts = <7 0>;
+		reg = <0x09 0 0>;
+		#clock-cells = <1>;
+
+		voltage-regulators {
+			ldo1_reg: LDO1 {
+				regulator-name = "VDD_ALIVE_1.0V";
+				regulator-min-microvolt = <1000000>;
+				regulator-max-microvolt = <1000000>;
+			};
+
+			ldo2_reg: LDO2 {
+				regulator-name = "VDDQ_VM1M2_1.2V";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1200000>;
+			};
+
+			ldo3_reg: LDO3 {
+				regulator-name = "VCC_1.8V_AP";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo4_reg: LDO4 {
+				regulator-name = "VDDQ_MMC2_2.8V";
+				regulator-min-microvolt = <2800000>;
+				regulator-max-microvolt = <2800000>;
+			};
+
+			ldo5_reg: LDO5 {
+				regulator-name = "VDDQ_MMC0/1/3_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo6_reg: LDO6 {
+				regulator-name = "VMPLL_1.0V";
+				regulator-min-microvolt = <1100000>;
+				regulator-max-microvolt = <1100000>;
+			};
+
+			ldo7_reg: LDO7 {
+				regulator-name = "VPLL_1.1V";
+				regulator-min-microvolt = <1100000>;
+				regulator-max-microvolt = <1100000>;
+			};
+
+			ldo8_reg: LDO8 {
+				regulator-name = "VDD_MIPI/HDMI_1.0V";
+				regulator-min-microvolt = <1000000>;
+				regulator-max-microvolt = <1000000>;
+			};
+
+			ldo10_reg: LDO10 {
+				regulator-name = "VDD_MIPI/HDMI_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo11_reg: LDO11 {
+				regulator-name = "VDD_ABB1_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo12_reg: LDO12 {
+				regulator-name = "VDD_UOTG_3.0V";
+				regulator-min-microvolt = <3000000>;
+				regulator-max-microvolt = <3000000>;
+			};
+
+			ldo13_reg: LDO13 {
+				regulator-name = "VDD_C2C_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo14_reg: LDO14 {
+				regulator-name = "VDD_ABB02_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo15_reg: LDO15 {
+				regulator-name = "VDD_HSIC/OTG_1.0V";
+				regulator-min-microvolt = <1000000>;
+				regulator-max-microvolt = <1000000>;
+			};
+
+			ldo16_reg: LDO16 {
+				regulator-name = "VDD_HSIC_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+			};
+
+			ldo17_reg: LDO17 {
+				regulator-name = "VDDQ_CAM_1.2V";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1200000>;
+			};
+
+			ldo20_reg: LDO20 {
+				regulator-name = "VDDQ_EMMC_1.8V";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-always-on;
+				regulator-boot-on;
+			};
+
+			ldo21_reg: LDO21 {
+				regulator-name = "TFLASH_2.8V";
+				regulator-min-microvolt = <2800000>;
+				regulator-max-microvolt = <2800000>;
+				regulator-always-on;
+				regulator-boot-on;
+			};
+
+			ldo22_reg: LDO22 {
+				regulator-name = "VDDQ_EMMC_2.8V";
+				regulator-min-microvolt = <2800000>;
+				regulator-max-microvolt = <2800000>;
+				regulator-always-on;
+				regulator-boot-on;
+			};
+
+			ldo25_reg: LDO25 {
+				regulator-compatible = "LDO25";
+				regulator-name = "VDDQ_LCD_3.0V";
+				regulator-min-microvolt = <3000000>;
+				regulator-max-microvolt = <3000000>;
+			};
+
+			buck1_reg: BUCK1 {
+				regulator-name = "VDD_MIF_1.0V";
+				regulator-min-microvolt = <8500000>;
+				regulator-max-microvolt = <1100000>;
+			};
+
+			buck2_reg: BUCK2 {
+				regulator-name = "VDD_ARM_1.0V";
+				regulator-min-microvolt = <850000>;
+				regulator-max-microvolt = <1500000>;
+			};
+
+			buck3_reg: BUCK3 {
+				regulator-name = "VDD_INT_1.1V";
+				regulator-min-microvolt = <850000>;
+				regulator-max-microvolt = <1150000>;
+			};
+
+			buck4_reg: BUCK4 {
+				regulator-name = "VDD_G3D_1.0V";
+				regulator-min-microvolt = <850000>;
+				regulator-max-microvolt = <1150000>;
+			};
+
+			buck5_reg: BUCK5 {
+				regulator-name = "VDDQ_AP_1.2V";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1200000>;
+			};
+
+			buck6_reg: BUCK6 {
+				regulator-name = "VCC_INL1/7_1.35V";
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+			};
+
+			buck7_reg: BUCK7 {
+				regulator-name = "VCC_INL2/3/5_2.0V";
+				regulator-min-microvolt = <2000000>;
+				regulator-max-microvolt = <2000000>;
+			};
+
+			buck8_reg: BUCK8 {
+				regulator-name = "VCC_P3V3_2.85V";
+				regulator-min-microvolt = <750000>;
+				regulator-max-microvolt = <3300000>;
+			};
+		};
+	};
+};
+
+&sdhci2 {
+	samsung,bus-width = <4>;
+	samsung,timing = <1 2 3>;
+	cd-gpios = <&gpk2 2 0>;
+	status = "okay";
+};
+
+&mshc_0 {
+	samsung,bus-width = <8>;
+	samsung,timing = <2 1 0>;
+	samsung,removable = <0>;
+	fifoth_val = <0x203f0040>;
+	bus_hz = <400000000>;
+	div = <0x3>;
+	index = <4>;
+	status = "okay";
+};
diff -ruN u-boot-2018.07/arch/arm/dts/Makefile u-boot-x4412/arch/arm/dts/Makefile
--- u-boot-2018.07/arch/arm/dts/Makefile	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/dts/Makefile	2018-09-25 18:52:51.902046210 +0800
@@ -12,7 +12,8 @@
 	exynos4210-universal_c210.dtb \
 	exynos4210-trats.dtb \
 	exynos4412-trats2.dtb \
-	exynos4412-odroid.dtb
+	exynos4412-odroid.dtb \
+	exynos4412-x4412.dtb
 
 dtb-$(CONFIG_TARGET_HIKEY) += hi6220-hikey.dtb
 
diff -ruN u-boot-2018.07/arch/arm/include/asm/mach-types.h u-boot-x4412/arch/arm/include/asm/mach-types.h
--- u-boot-2018.07/arch/arm/include/asm/mach-types.h	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/include/asm/mach-types.h	2018-09-25 18:52:51.902046210 +0800
@@ -4550,7 +4550,8 @@
 #define MACH_TYPE_CANISMAJOR           4605
 #define MACH_TYPE_AT91SAM9263MIB       4606
 #define MACH_TYPE_COSINO_9G35          4607
-#define MACH_TYPE_TINY4412             4608
+//#define MACH_TYPE_TINY4412             4608
+#define MACH_TYPE_X4412                4608
 #define MACH_TYPE_BALLOON4             4609
 #define MACH_TYPE_PGG                  4610
 #define MACH_TYPE_XXSQ701              4611
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/clock_init_exynos4.c u-boot-x4412/arch/arm/mach-exynos/clock_init_exynos4.c
--- u-boot-2018.07/arch/arm/mach-exynos/clock_init_exynos4.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/clock_init_exynos4.c	2018-09-25 18:52:51.902046210 +0800
@@ -30,7 +30,11 @@
 #include <asm/arch/clk.h>
 #include <asm/arch/clock.h>
 #include "common_setup.h"
+#ifdef CONFIG_X4412
+#include "x4412_setup.h"
+#else
 #include "exynos4_setup.h"
+#endif
 
 /*
  * system_clock_init: Initialize core clock and bus clock.
@@ -38,6 +42,269 @@
  */
 void system_clock_init(void)
 {
+#ifdef CONFIG_X4412
+	unsigned int set, clr, clr_src_cpu, clr_pll_con0, clr_src_dmc;
+	struct exynos4x12_clock *clk = (struct exynos4x12_clock *)
+						samsung_get_base_clock();
+	
+	/*
+	* CMU_CPU clocks src to MPLL
+	* Bit values:                 0  ; 1
+	* MUX_APLL_SEL:        FIN_PLL   ; FOUT_APLL
+	* MUX_CORE_SEL:        MOUT_APLL ; SCLK_MPLL
+	* MUX_HPM_SEL:         MOUT_APLL ; SCLK_MPLL_USER_C
+	* MUX_MPLL_USER_SEL_C: FIN_PLL   ; SCLK_MPLL
+	*/
+	clr_src_cpu = MUX_APLL_SEL(1) | MUX_CORE_SEL(1) |
+			MUX_HPM_SEL(1) | MUX_MPLL_USER_SEL_C(1);
+	set = MUX_APLL_SEL(0) | MUX_CORE_SEL(1) | MUX_HPM_SEL(1) |
+		MUX_MPLL_USER_SEL_C(1);
+	
+	clrsetbits_le32(&;clk->src_cpu, clr_src_cpu, set);
+	
+	/* Wait for mux change */
+	while (readl(&;clk->mux_stat_cpu) & MUX_STAT_CPU_CHANGING)
+		continue;
+	
+	/* Set APLL to 1400MHz */
+	clr_pll_con0 = SDIV(7) | PDIV(63) | MDIV(1023) | FSEL(1);
+	set = SDIV(0x0) | PDIV(0x3) | MDIV(0xAF) | FSEL(1);
+	
+	clrsetbits_le32(&;clk->apll_con0, clr_pll_con0, set);
+	
+	/* Wait for PLL to be locked */
+	while (!(readl(&;clk->apll_con0) & PLL_LOCKED_BIT))
+		continue;
+	
+	/* Set CMU_CPU clocks src to APLL */
+	set = MUX_APLL_SEL(1) | MUX_CORE_SEL(0) | MUX_HPM_SEL(0) |
+		MUX_MPLL_USER_SEL_C(1);
+	clrsetbits_le32(&clk->src_cpu, clr_src_cpu, set);
+	
+	/* Wait for mux change */
+	while (readl(&;clk->mux_stat_cpu) & MUX_STAT_CPU_CHANGING)
+		continue;
+	
+	set = CORE_RATIO(0) | COREM0_RATIO(2) | COREM1_RATIO(5) |
+		PERIPH_RATIO(0) | ATB_RATIO(4) | PCLK_DBG_RATIO(1) |
+		APLL_RATIO(0) | CORE2_RATIO(0);
+	/*
+	* Set dividers for MOUTcore = 1400 MHz
+	* coreout =      MOUT / (ratio + 1) = 1400 MHz (0)
+	* corem0 =     armclk / (ratio + 1) = 466 MHz (2)
+	* corem1 =     armclk / (ratio + 1) = 233 MHz (5)
+	* periph =     armclk / (ratio + 1) = 1400 MHz (0)
+	* atbout =       MOUT / (ratio + 1) = 280 MHz (4)
+	* pclkdbgout = atbout / (ratio + 1) = 140 MHz (1)
+	* sclkapll = MOUTapll / (ratio + 1) = 1400 MHz (0)
+	* core2out = core_out / (ratio + 1) = 1400 MHz (0) (armclk)
+	*/
+	clr = CORE_RATIO(7) | COREM0_RATIO(7) | COREM1_RATIO(7) |
+		PERIPH_RATIO(7) | ATB_RATIO(7) | PCLK_DBG_RATIO(7) |
+		APLL_RATIO(7) | CORE2_RATIO(7);
+	
+	clrsetbits_le32(&;clk->div_cpu0, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_cpu0) & DIV_STAT_CPU0_CHANGING)
+		continue;
+	
+	/*
+	* For MOUThpm = 1400 MHz (MOUTapll)
+	* doutcopy = MOUThpm / (ratio + 1) = 280 (4)
+	* sclkhpm = doutcopy / (ratio + 1) = 280 (4)
+	* cores_out = armclk / (ratio + 1) = 280 (4)
+	*/
+	clr = COPY_RATIO(7) | HPM_RATIO(7) | CORES_RATIO(7);
+	set = COPY_RATIO(4) | HPM_RATIO(4) | CORES_RATIO(4);
+	
+	clrsetbits_le32(&;clk->div_cpu1, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_cpu1) & DIV_STAT_CPU1_CHANGING)
+		continue;
+	
+	/*
+	* Set CMU_DMC clocks src to APLL
+	* Bit values:             0  ; 1
+	* MUX_C2C_SEL:      SCLKMPLL ; SCLKAPLL
+	* MUX_DMC_BUS_SEL:  SCLKMPLL ; SCLKAPLL
+	* MUX_DPHY_SEL:     SCLKMPLL ; SCLKAPLL
+	* MUX_MPLL_SEL:     FINPLL   ; MOUT_MPLL_FOUT
+	* MUX_PWI_SEL:      0110 (MPLL); 0111 (EPLL); 1000 (VPLL); 0(XXTI)
+	* MUX_G2D_ACP0_SEL: SCLKMPLL ; SCLKAPLL
+	* MUX_G2D_ACP1_SEL: SCLKEPLL ; SCLKVPLL
+	* MUX_G2D_ACP_SEL:  OUT_ACP0 ; OUT_ACP1
+	*/
+	clr_src_dmc = MUX_C2C_SEL(1) | MUX_DMC_BUS_SEL(1) |
+			MUX_DPHY_SEL(1) | MUX_MPLL_SEL(1) |
+			MUX_PWI_SEL(15) | MUX_G2D_ACP0_SEL(1) |
+			MUX_G2D_ACP1_SEL(1) | MUX_G2D_ACP_SEL(1);
+	set = MUX_C2C_SEL(1) | MUX_DMC_BUS_SEL(1) | MUX_DPHY_SEL(1) |
+		MUX_MPLL_SEL(0) | MUX_PWI_SEL(0) | MUX_G2D_ACP0_SEL(1) |
+		MUX_G2D_ACP1_SEL(1) | MUX_G2D_ACP_SEL(1);
+	
+	clrsetbits_le32(&;clk->src_dmc, clr_src_dmc, set);
+	
+	/* Wait for mux change */
+	while (readl(&;clk->mux_stat_dmc) & MUX_STAT_DMC_CHANGING)
+		continue;
+	
+	/* Set MPLL to 800MHz */
+	set = SDIV(0) | PDIV(3) | MDIV(100) | FSEL(0) | PLL_ENABLE(1);
+	
+	clrsetbits_le32(&;clk->mpll_con0, clr_pll_con0, set);
+	
+	/* Wait for PLL to be locked */
+	while (!(readl(&;clk->mpll_con0) & PLL_LOCKED_BIT))
+		continue;
+	
+	/* Switch back CMU_DMC mux */
+	set = MUX_C2C_SEL(0) | MUX_DMC_BUS_SEL(0) | MUX_DPHY_SEL(0) |
+		MUX_MPLL_SEL(1) | MUX_PWI_SEL(6) | MUX_G2D_ACP0_SEL(0) |
+		MUX_G2D_ACP1_SEL(0) | MUX_G2D_ACP_SEL(0);
+	
+	clrsetbits_le32(&;clk->src_dmc, clr_src_dmc, set);
+	
+	/* Wait for mux change */
+	while (readl(&;clk->mux_stat_dmc) & MUX_STAT_DMC_CHANGING)
+		continue;
+	
+	/* CLK_DIV_DMC0 */
+	clr = ACP_RATIO(7) | ACP_PCLK_RATIO(7) | DPHY_RATIO(7) |
+		DMC_RATIO(7) | DMCD_RATIO(7) | DMCP_RATIO(7);
+	/*
+	* For:
+	* MOUTdmc = 800 MHz
+	* MOUTdphy = 800 MHz
+	*
+	* aclk_acp = MOUTdmc / (ratio + 1) = 200 (3)
+	* pclk_acp = aclk_acp / (ratio + 1) = 100 (1)
+	* sclk_dphy = MOUTdphy / (ratio + 1) = 400 (1)
+	* sclk_dmc = MOUTdmc / (ratio + 1) = 400 (1)
+	* aclk_dmcd = sclk_dmc / (ratio + 1) = 200 (1)
+	* aclk_dmcp = aclk_dmcd / (ratio + 1) = 100 (1)
+	*/
+	set = ACP_RATIO(3) | ACP_PCLK_RATIO(1) | DPHY_RATIO(1) |
+		DMC_RATIO(1) | DMCD_RATIO(1) | DMCP_RATIO(1);
+	
+	clrsetbits_le32(&;clk->div_dmc0, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_dmc0) & DIV_STAT_DMC0_CHANGING)
+		continue;
+	
+	/* CLK_DIV_DMC1 */
+	clr = G2D_ACP_RATIO(15) | C2C_RATIO(7) | PWI_RATIO(15) |
+		C2C_ACLK_RATIO(7) | DVSEM_RATIO(127) | DPM_RATIO(127);
+	/*
+	* For:
+	* MOUTg2d = 800 MHz
+	* MOUTc2c = 800 Mhz
+	* MOUTpwi = 800 MHz
+	*
+	* sclk_g2d_acp = MOUTg2d / (ratio + 1) = 200 (3)
+	* sclk_c2c = MOUTc2c / (ratio + 1) = 400 (1)
+	* aclk_c2c = sclk_c2c / (ratio + 1) = 200 (1)
+	* sclk_pwi = MOUTpwi / (ratio + 1) = 100 (7)
+	*/
+	set = G2D_ACP_RATIO(3) | C2C_RATIO(1) | PWI_RATIO(7) |
+		C2C_ACLK_RATIO(1) | DVSEM_RATIO(1) | DPM_RATIO(1);
+	
+	clrsetbits_le32(&;clk->div_dmc1, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_dmc1) & DIV_STAT_DMC1_CHANGING)
+		continue;
+	
+	/* CLK_SRC_PERIL0 */
+	clr = UART0_SEL(15) | UART1_SEL(15) | UART2_SEL(15) |
+		UART3_SEL(15) | UART4_SEL(15);
+	/*
+	* Set CLK_SRC_PERIL0 clocks src to MPLL
+	* src values: 0(XXTI); 1(XusbXTI); 2(SCLK_HDMI24M); 3(SCLK_USBPHY0);
+	*             5(SCLK_HDMIPHY); 6(SCLK_MPLL_USER_T); 7(SCLK_EPLL);
+	*             8(SCLK_VPLL)
+	*
+	* Set all to SCLK_MPLL_USER_T
+	*/
+	set = UART0_SEL(6) | UART1_SEL(6) | UART2_SEL(6) | UART3_SEL(6) |
+		UART4_SEL(6);
+	
+	clrsetbits_le32(&;clk->src_peril0, clr, set);
+	
+	/* CLK_DIV_PERIL0 */
+	clr = UART0_RATIO(15) | UART1_RATIO(15) | UART2_RATIO(15) |
+		UART3_RATIO(15) | UART4_RATIO(15);
+	/*
+	* For MOUTuart0-4: 800MHz
+	*
+	* SCLK_UARTx = MOUTuartX / (ratio + 1) = 100 (7)
+	*/
+	set = UART0_RATIO(7) | UART1_RATIO(7) | UART2_RATIO(7) |
+		UART3_RATIO(7) | UART4_RATIO(7);
+	
+	clrsetbits_le32(&;clk->div_peril0, clr, set);
+	
+	while (readl(&;clk->div_stat_peril0) & DIV_STAT_PERIL0_CHANGING)
+		continue;
+	
+	/* CLK_DIV_FSYS1 */
+	clr = MMC0_RATIO(15) | MMC0_PRE_RATIO(255) | MMC1_RATIO(15) |
+		MMC1_PRE_RATIO(255);
+	/*
+	* For MOUTmmc0-3 = 800 MHz (MPLL)
+	*
+	* DOUTmmc1 = MOUTmmc1 / (ratio + 1) = 100 (7)
+	* sclk_mmc1 = DOUTmmc1 / (ratio + 1) = 50 (1)
+	* DOUTmmc0 = MOUTmmc0 / (ratio + 1) = 100 (7)
+	* sclk_mmc0 = DOUTmmc0 / (ratio + 1) = 50 (1)
+	*/
+	set = MMC0_RATIO(7) | MMC0_PRE_RATIO(1) | MMC1_RATIO(7) |
+		MMC1_PRE_RATIO(1);
+	
+	clrsetbits_le32(&;clk->div_fsys1, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_fsys1) & DIV_STAT_FSYS1_CHANGING)
+		continue;
+	
+	/* CLK_DIV_FSYS2 */
+	clr = MMC2_RATIO(15) | MMC2_PRE_RATIO(255) | MMC3_RATIO(15) |
+		MMC3_PRE_RATIO(255);
+	/*
+	* For MOUTmmc0-3 = 800 MHz (MPLL)
+	*
+	* DOUTmmc3 = MOUTmmc3 / (ratio + 1) = 100 (7)
+	* sclk_mmc3 = DOUTmmc3 / (ratio + 1) = 50 (1)
+	* DOUTmmc2 = MOUTmmc2 / (ratio + 1) = 100 (7)
+	* sclk_mmc2 = DOUTmmc2 / (ratio + 1) = 50 (1)
+	*/
+	set = MMC2_RATIO(7) | MMC2_PRE_RATIO(1) | MMC3_RATIO(7) |
+		MMC3_PRE_RATIO(1);
+	
+	clrsetbits_le32(&;clk->div_fsys2, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_fsys2) & DIV_STAT_FSYS2_CHANGING)
+		continue;
+	
+	/* CLK_DIV_FSYS3 */
+	clr = MMC4_RATIO(15) | MMC4_PRE_RATIO(255);
+	/*
+	* For MOUTmmc4 = 800 MHz (MPLL)
+	*
+	* DOUTmmc4 = MOUTmmc4 / (ratio + 1) = 100 (7)
+	* sclk_mmc4 = DOUTmmc4 / (ratio + 1) = 100 (0)
+	*/
+	set = MMC4_RATIO(7) | MMC4_PRE_RATIO(0);
+	
+	clrsetbits_le32(&;clk->div_fsys3, clr, set);
+	
+	/* Wait for divider ready status */
+	while (readl(&;clk->div_stat_fsys3) & DIV_STAT_FSYS3_CHANGING)
+		continue;
+#else
 	struct exynos4_clock *clk =
 			(struct exynos4_clock *)samsung_get_base_clock();
 
@@ -91,4 +358,5 @@
 	writel(VPLL_CON0_VAL, &clk->vpll_con0);
 
 	sdelay(0x30000);
+#endif
 }
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/dmc_init_exynos4.c u-boot-x4412/arch/arm/mach-exynos/dmc_init_exynos4.c
--- u-boot-2018.07/arch/arm/mach-exynos/dmc_init_exynos4.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/dmc_init_exynos4.c	2018-09-26 17:51:21.248634886 +0800
@@ -29,6 +29,27 @@
 #include "exynos4_setup.h"
 
 struct mem_timings mem = {
+#ifdef CONFIG_X4412
+struct mem_timings mem = {
+	.direct_cmd_msr = {
+		DIRECT_CMD1, DIRECT_CMD2, DIRECT_CMD3, DIRECT_CMD4
+	},
+	.timingref = 0x000000BB,
+	.timingrow = 0x4046654f,
+	.timingdata = 0x46400506,
+	.timingpower = 0x52000A3C,
+	.zqcontrol = 0xE3854C03,
+	.control0 = 0x71101008,
+	.control1 = 0xe0000086,
+	.control2 = 0x00000000,
+	.concontrol = 0x0FFF301A,
+	.prechconfig = 0xff000000,
+	.memcontrol = 0x00312640,
+	.memconfig0 = 0x40e01323,
+	.memconfig1 = 0x60e01323,
+	.dll_resync = FORCE_DLL_RESYNC,
+	.dll_on = DLL_CONTROL_ON,
+#else
 	.direct_cmd_msr = {
 		DIRECT_CMD1, DIRECT_CMD2, DIRECT_CMD3, DIRECT_CMD4
 	},
@@ -47,10 +68,16 @@
 	.memconfig1 = MEMCONFIG1_VAL,
 	.dll_resync = FORCE_DLL_RESYNC,
 	.dll_on = DLL_CONTROL_ON,
+#endif
 };
 static void phy_control_reset(int ctrl_no, struct exynos4_dmc *dmc)
 {
 	if (ctrl_no) {
+#ifdef CONFIG_X4412
+		/* Add by Wang.Yu 2018-09-26 */
+		/* It is copied from Pengdonglin's blog, but it seems different from this U-boot version(2018-07). */
+		writel(0x8000001F, &dmc->ivcontrol);
+#endif
 		writel((mem.control1 | (1 << mem.dll_resync)),
 		       &dmc->phycontrol1);
 		writel((mem.control1 | (0 << mem.dll_resync)),
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/Kconfig u-boot-x4412/arch/arm/mach-exynos/Kconfig
--- u-boot-2018.07/arch/arm/mach-exynos/Kconfig	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/Kconfig	2018-09-25 18:52:51.902046210 +0800
@@ -60,6 +60,10 @@
 	bool "Exynos4412 Origen board"
 	select SUPPORT_SPL
 
+config TARGET_X4412
+	bool "Exynos4412 X4412 board"
+	select SUPPORT_SPL
+
 config TARGET_TRATS2
 	bool "Exynos4412 Trat2 board"
 
@@ -156,6 +160,7 @@
 source "board/samsung/trats/Kconfig"
 source "board/samsung/universal_c210/Kconfig"
 source "board/samsung/origen/Kconfig"
+source "board/samsung/x4412/Kconfig"
 source "board/samsung/trats2/Kconfig"
 source "board/samsung/odroid/Kconfig"
 source "board/samsung/arndale/Kconfig"
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/lowlevel_init.c u-boot-x4412/arch/arm/mach-exynos/lowlevel_init.c
--- u-boot-2018.07/arch/arm/mach-exynos/lowlevel_init.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/lowlevel_init.c	2018-09-26 17:53:34.595064840 +0800
@@ -218,8 +218,9 @@
 #ifdef CONFIG_DEBUG_UART
 #if (defined(CONFIG_SPL_BUILD) && defined(CONFIG_SPL_SERIAL_SUPPORT)) || \
     !defined(CONFIG_SPL_BUILD)
-		exynos_pinmux_config(PERIPH_ID_UART3, PINMUX_FLAG_NONE);
+		exynos_pinmux_config(PERIPH_ID_UART0, PINMUX_FLAG_NONE);
 		debug_uart_init();
+		printascii("UART OK!\n\r");
 #endif
 #endif
 		mem_ctrl_init(actions & DO_MEM_RESET);
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/spl_boot.c u-boot-x4412/arch/arm/mach-exynos/spl_boot.c
--- u-boot-2018.07/arch/arm/mach-exynos/spl_boot.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/spl_boot.c	2018-09-26 17:59:39.594383237 +0800
@@ -184,7 +184,8 @@
 {
 	unsigned int bootmode = BOOT_MODE_OM;
 
-	u32 (*copy_bl2)(u32 offset, u32 nblock, u32 dst) = NULL;
+	//u32 (*copy_bl2)(u32 offset, u32 nblock, u32 dst) = NULL;
+	u32 (*copy_uboot)(u32 offset, u32 nblock, u32 dst) = NULL;
 	u32 offset = 0, size = 0;
 #ifdef CONFIG_SPI_BOOTING
 	struct spl_machine_param *param = spl_get_machine_params();
@@ -221,9 +222,9 @@
 		break;
 #endif
 	case BOOT_MODE_SD:
-		offset = BL2_START_OFFSET;
-		size = BL2_SIZE_BLOC_COUNT;
-		copy_bl2 = get_irom_func(MMC_INDEX);
+		offset = UBOOT_START_OFFSET;
+		size = UBOOT_SIZE_BLOC_COUNT;
+		copy_uboot = get_irom_func(MMC_INDEX);
 		break;
 #ifdef CONFIG_SUPPORT_EMMC_BOOT
 	case BOOT_MODE_EMMC:
@@ -253,8 +254,34 @@
 		break;
 	}
 
-	if (copy_bl2)
-		copy_bl2(offset, size, CONFIG_SYS_TEXT_BASE);
+#ifdef CONFIG_X4412
+	if (copy_uboot)
+	{
+		/*
+		 * Here I use iram 0x020250000-0x020260000 (64k)
+		 * as an buffer, and copy u-boot from sd card to 
+		 * this buffer, then copy it to dram started 
+		 * from 0x43e00000.
+		 *
+		 */
+		unsigned int i, count = 0;
+		unsigned char *buffer = (unsigned char *)0x02050000;
+		unsigned char *dst = (unsigned char *)CONFIG_SYS_TEXT_BASE;
+		unsigned int step = (0x10000 / 512);
+
+		for (count = 0; count < UBOOT_SIZE_BLOC_COUNT; count+=step) {
+			/* copy u-boot from sdcard to iram firstly.  */
+			copy_uboot((u32)(UBOOT_START_OFFSET+count), (u32)step, (u32)buffer);
+			/* then copy u-boot from iram to dram. */
+			for (i=0; i<0x10000; i++) {
+				*dst++ = buffer[i];
+			}
+		}
+	}
+#else
+	if (copy_uboot)
+		copy_uboot(offset, size, CONFIG_SYS_TEXT_BASE);
+#endif
 }
 
 void memzero(void *s, size_t n)
diff -ruN u-boot-2018.07/arch/arm/mach-exynos/x4412_setup.h u-boot-x4412/arch/arm/mach-exynos/x4412_setup.h
--- u-boot-2018.07/arch/arm/mach-exynos/x4412_setup.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/arch/arm/mach-exynos/x4412_setup.h	2018-09-25 18:52:51.902046210 +0800
@@ -0,0 +1,228 @@
+/*
+ * Copyright (C) 2014 Samsung Electronics
+ * Przemyslaw Marczak <p.marczak@samsung.com>
+ *
+ * SPDX-License-Identifier:    GPL-2.0+
+ */
+
+#ifndef __X4412_SETUP__
+#define __X4412_SETUP__
+
+/* A/M PLL_CON0 */
+#define SDIV(x)			((x) &; 0x7)
+#define PDIV(x)			(((x) &; 0x3f) << 8)
+#define MDIV(x)			(((x) &; 0x3ff) << 16)
+#define FSEL(x)			(((x) &; 0x1) << 27)
+#define PLL_LOCKED_BIT		(0x1 <;< 29)
+#define PLL_ENABLE(x)		(((x) &; 0x1) << 31)
+
+/* CLK_SRC_CPU */
+#define MUX_APLL_SEL(x)		((x) &; 0x1)
+#define MUX_CORE_SEL(x)		(((x) &; 0x1) << 16)
+#define MUX_HPM_SEL(x)		(((x) &; 0x1) << 20)
+#define MUX_MPLL_USER_SEL_C(x)	(((x) &; 0x1) << 24)
+
+#define MUX_STAT_CHANGING	0x100
+
+/* CLK_MUX_STAT_CPU */
+#define APLL_SEL(x)		((x) &; 0x7)
+#define CORE_SEL(x)		(((x) &; 0x7) << 16)
+#define HPM_SEL(x)		(((x) &; 0x7) << 20)
+#define MPLL_USER_SEL_C(x)	(((x) &; 0x7) << 24)
+#define MUX_STAT_CPU_CHANGING	(APLL_SEL(MUX_STAT_CHANGING) | \
+                CORE_SEL(MUX_STAT_CHANGING) | \
+                HPM_SEL(MUX_STAT_CHANGING) | \
+                MPLL_USER_SEL_C(MUX_STAT_CHANGING))
+
+/* CLK_DIV_CPU0 */
+#define CORE_RATIO(x)		((x) &; 0x7)
+#define COREM0_RATIO(x)		(((x) &; 0x7) << 4)
+#define COREM1_RATIO(x)		(((x) &; 0x7) << 8)
+#define PERIPH_RATIO(x)		(((x) &; 0x7) << 12)
+#define ATB_RATIO(x)		(((x) &; 0x7) << 16)
+#define PCLK_DBG_RATIO(x)	(((x) &; 0x7) << 20)
+#define APLL_RATIO(x)		(((x) &; 0x7) << 24)
+#define CORE2_RATIO(x)		(((x) &; 0x7) << 28)
+
+/* CLK_DIV_STAT_CPU0 */
+#define DIV_CORE(x)		((x) &; 0x1)
+#define DIV_COREM0(x)		(((x) &; 0x1) << 4)
+#define DIV_COREM1(x)		(((x) &; 0x1) << 8)
+#define DIV_PERIPH(x)		(((x) &; 0x1) << 12)
+#define DIV_ATB(x)		(((x) &; 0x1) << 16)
+#define DIV_PCLK_DBG(x)		(((x) &; 0x1) << 20)
+#define DIV_APLL(x)		(((x) &; 0x1) << 24)
+#define DIV_CORE2(x)		(((x) &; 0x1) << 28)
+
+#define DIV_STAT_CHANGING       0x1
+#define DIV_STAT_CPU0_CHANGING  (DIV_CORE(DIV_STAT_CHANGING) | \
+                DIV_COREM0(DIV_STAT_CHANGING) | \
+                DIV_COREM1(DIV_STAT_CHANGING) | \
+                DIV_PERIPH(DIV_STAT_CHANGING) | \
+                DIV_ATB(DIV_STAT_CHANGING) | \
+                DIV_PCLK_DBG(DIV_STAT_CHANGING) | \
+                DIV_APLL(DIV_STAT_CHANGING) | \
+                DIV_CORE2(DIV_STAT_CHANGING))
+
+/* CLK_DIV_CPU1 */
+#define COPY_RATIO(x)           ((x) &; 0x7)
+#define HPM_RATIO(x)            (((x) &; 0x7) << 4)
+#define CORES_RATIO(x)		(((x) &; 0x7) << 8)
+
+/* CLK_DIV_STAT_CPU1 */
+#define DIV_COPY(x)		((x) &; 0x7)
+#define DIV_HPM(x)		(((x) &; 0x1) << 4)
+#define DIV_CORES(x)		(((x) &; 0x1) << 8)
+
+#define DIV_STAT_CPU1_CHANGING    (DIV_COPY(DIV_STAT_CHANGING) | \
+                DIV_HPM(DIV_STAT_CHANGING) | \
+                DIV_CORES(DIV_STAT_CHANGING))
+
+/* CLK_SRC_DMC */
+#define MUX_C2C_SEL(x)		((x) &; 0x1)
+#define MUX_DMC_BUS_SEL(x)	(((x) &; 0x1) << 4)
+#define MUX_DPHY_SEL(x)		(((x) &; 0x1) << 8)
+#define MUX_MPLL_SEL(x)		(((x) &; 0x1) << 12)
+#define MUX_PWI_SEL(x)		(((x) &; 0xf) << 16)
+#define MUX_G2D_ACP0_SEL(x)	(((x) &; 0x1) << 20)
+#define MUX_G2D_ACP1_SEL(x)	(((x) &; 0x1) << 24)
+#define MUX_G2D_ACP_SEL(x)	(((x) &; 0x1) << 28)
+
+/* CLK_MUX_STAT_DMC */
+#define C2C_SEL(x)        	(((x)) &; 0x7)
+#define DMC_BUS_SEL(x)        	(((x) &; 0x7) << 4)
+#define DPHY_SEL(x)        	(((x) &; 0x7) << 8)
+#define MPLL_SEL(x)        	(((x) &; 0x7) << 12)
+/* #define PWI_SEL(x)        	   (((x) &; 0xf) << 16)  - Reserved */
+#define G2D_ACP0_SEL(x)		(((x) &; 0x7) << 20)
+#define G2D_ACP1_SEL(x)		(((x) &; 0x7) << 24)
+#define G2D_ACP_SEL(x)		(((x) &; 0x7) << 28)
+
+#define MUX_STAT_DMC_CHANGING    (C2C_SEL(MUX_STAT_CHANGING) | \
+                DMC_BUS_SEL(MUX_STAT_CHANGING) | \
+                DPHY_SEL(MUX_STAT_CHANGING) | \
+                MPLL_SEL(MUX_STAT_CHANGING) |\
+                G2D_ACP0_SEL(MUX_STAT_CHANGING) | \
+                G2D_ACP1_SEL(MUX_STAT_CHANGING) | \
+                G2D_ACP_SEL(MUX_STAT_CHANGING))
+
+/* CLK_DIV_DMC0 */
+#define ACP_RATIO(x)		((x) &; 0x7)
+#define ACP_PCLK_RATIO(x)	(((x) &; 0x7) << 4)
+#define DPHY_RATIO(x)		(((x) &; 0x7) << 8)
+#define DMC_RATIO(x)		(((x) &; 0x7) << 12)
+#define DMCD_RATIO(x)		(((x) &; 0x7) << 16)
+#define DMCP_RATIO(x)		(((x) &; 0x7) << 20)
+
+/* CLK_DIV_STAT_DMC0 */
+#define DIV_ACP(x)		((x) &; 0x1)
+#define DIV_ACP_PCLK(x)		(((x) &; 0x1) << 4)
+#define DIV_DPHY(x)		(((x) &; 0x1) << 8)
+#define DIV_DMC(x)		(((x) &; 0x1) << 12)
+#define DIV_DMCD(x)		(((x) &; 0x1) << 16)
+#define DIV_DMCP(x)		(((x) &; 0x1) << 20)
+
+#define DIV_STAT_DMC0_CHANGING    (DIV_ACP(DIV_STAT_CHANGING) | \
+                DIV_ACP_PCLK(DIV_STAT_CHANGING) | \
+                DIV_DPHY(DIV_STAT_CHANGING) | \
+                DIV_DMC(DIV_STAT_CHANGING) | \
+                DIV_DMCD(DIV_STAT_CHANGING) | \
+                DIV_DMCP(DIV_STAT_CHANGING))
+
+/* CLK_DIV_DMC1 */
+#define G2D_ACP_RATIO(x) 	((x) &; 0xf)
+#define C2C_RATIO(x)		(((x) &; 0x7) << 4)
+#define PWI_RATIO(x)		(((x) &; 0xf) << 8)
+#define C2C_ACLK_RATIO(x)	(((x) &; 0x7) << 12)
+#define DVSEM_RATIO(x)		(((x) &; 0x7f) << 16)
+#define DPM_RATIO(x)		(((x) &; 0x7f) << 24)
+
+/* CLK_DIV_STAT_DMC1 */
+#define DIV_G2D_ACP(x)		((x) &; 0x1)
+#define DIV_C2C(x)		(((x) &; 0x1) << 4)
+#define DIV_PWI(x)		(((x) &; 0x1) << 8)
+#define DIV_C2C_ACLK(x)		(((x) &; 0x1) << 12)
+#define DIV_DVSEM(x)		(((x) &; 0x1) << 16)
+#define DIV_DPM(x)		(((x) &; 0x1) << 24)
+
+#define DIV_STAT_DMC1_CHANGING    (DIV_G2D_ACP(DIV_STAT_CHANGING) | \
+                DIV_C2C(DIV_STAT_CHANGING) | \
+                DIV_PWI(DIV_STAT_CHANGING) | \
+                DIV_C2C_ACLK(DIV_STAT_CHANGING) | \
+                DIV_DVSEM(DIV_STAT_CHANGING) | \
+                DIV_DPM(DIV_STAT_CHANGING))
+
+/* Set CLK_SRC_PERIL0 */
+#define UART4_SEL(x)		(((x) &; 0xf) << 16)
+#define UART3_SEL(x)		(((x) &; 0xf) << 12)
+#define UART2_SEL(x)		(((x) &; 0xf) << 8)
+#define UART1_SEL(x)		(((x) &; 0xf) << 4)
+#define UART0_SEL(x)		((x) &; 0xf)
+
+/* Set CLK_DIV_PERIL0 */
+#define UART4_RATIO(x)		(((x) &; 0xf) << 16)
+#define UART3_RATIO(x)		(((x) &; 0xf) << 12)
+#define UART2_RATIO(x)		(((x) &; 0xf) << 8)
+#define UART1_RATIO(x)		(((x) &; 0xf) << 4)
+#define UART0_RATIO(x)		((x) &; 0xf)
+
+/* Set CLK_DIV_STAT_PERIL0 */
+#define DIV_UART4(x)		(((x) &; 0x1) << 16)
+#define DIV_UART3(x)		(((x) &; 0x1) << 12)
+#define DIV_UART2(x)		(((x) &; 0x1) << 8)
+#define DIV_UART1(x)		(((x) &; 0x1) << 4)
+#define DIV_UART0(x)		((x) &; 0x1)
+
+#define DIV_STAT_PERIL0_CHANGING    (DIV_UART4(DIV_STAT_CHANGING) | \
+                    DIV_UART3(DIV_STAT_CHANGING) | \
+                    DIV_UART2(DIV_STAT_CHANGING) | \
+                    DIV_UART1(DIV_STAT_CHANGING) | \
+                    DIV_UART0(DIV_STAT_CHANGING))
+
+/* CLK_DIV_FSYS1 */
+#define MMC0_RATIO(x)		((x) &; 0xf)
+#define MMC0_PRE_RATIO(x)	(((x) &; 0xff) << 8)
+#define MMC1_RATIO(x)		(((x) &; 0xf) << 16)
+#define MMC1_PRE_RATIO(x)	(((x) &; 0xff) << 24)
+
+/* CLK_DIV_STAT_FSYS1 */
+#define DIV_MMC0(x)		((x) &; 1)
+#define DIV_MMC0_PRE(x)		(((x) &; 1) << 8)
+#define DIV_MMC1(x)		(((x) &; 1) << 16)
+#define DIV_MMC1_PRE(x)		(((x) &; 1) << 24)
+
+#define DIV_STAT_FSYS1_CHANGING        (DIV_MMC0(DIV_STAT_CHANGING) | \
+                    DIV_MMC0_PRE(DIV_STAT_CHANGING) | \
+                    DIV_MMC1(DIV_STAT_CHANGING) | \
+                    DIV_MMC1_PRE(DIV_STAT_CHANGING))
+
+/* CLK_DIV_FSYS2 */
+#define MMC2_RATIO(x)		((x) &; 0xf)
+#define MMC2_PRE_RATIO(x)	(((x) &; 0xff) << 8)
+#define MMC3_RATIO(x)		(((x) &; 0xf) << 16)
+#define MMC3_PRE_RATIO(x)	(((x) &; 0xff) << 24)
+
+/* CLK_DIV_STAT_FSYS2 */
+#define DIV_MMC2(x)		((x) &; 0x1)
+#define DIV_MMC2_PRE(x)		(((x) &; 0x1) << 8)
+#define DIV_MMC3(x)		(((x) &; 0x1) << 16)
+#define DIV_MMC3_PRE(x)		(((x) &; 0x1) << 24)
+
+#define DIV_STAT_FSYS2_CHANGING        (DIV_MMC2(DIV_STAT_CHANGING) | \
+                    DIV_MMC2_PRE(DIV_STAT_CHANGING) | \
+                    DIV_MMC3(DIV_STAT_CHANGING) | \
+                    DIV_MMC3_PRE(DIV_STAT_CHANGING))
+
+/* CLK_DIV_FSYS3 */
+#define MMC4_RATIO(x)		((x) &; 0x7)
+#define MMC4_PRE_RATIO(x)	(((x) &; 0xff) << 8)
+
+/* CLK_DIV_STAT_FSYS3 */
+#define DIV_MMC4(x)		((x) &; 0x1)
+#define DIV_MMC4_PRE(x)		(((x) &; 0x1) << 8)
+
+#define DIV_STAT_FSYS3_CHANGING        (DIV_MMC4(DIV_STAT_CHANGING) | \
+                    DIV_MMC4_PRE(DIV_STAT_CHANGING))
+
+#endif /* __X4412_SETUP__ */
+
diff -ruN u-boot-2018.07/board/samsung/x4412/Kconfig u-boot-x4412/board/samsung/x4412/Kconfig
--- u-boot-2018.07/board/samsung/x4412/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/board/samsung/x4412/Kconfig	2018-09-25 18:52:51.902046210 +0800
@@ -0,0 +1,12 @@
+if TARGET_ORIGEN
+
+config SYS_BOARD
+	default "x4412"
+
+config SYS_VENDOR
+	default "samsung"
+
+config SYS_CONFIG_NAME
+	default "x4412"
+
+endif
diff -ruN u-boot-2018.07/board/samsung/x4412/MAINTAINERS u-boot-x4412/board/samsung/x4412/MAINTAINERS
--- u-boot-2018.07/board/samsung/x4412/MAINTAINERS	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/board/samsung/x4412/MAINTAINERS	2018-07-09 22:24:14.000000000 +0800
@@ -0,0 +1,6 @@
+ORIGEN BOARD
+M:	Chander Kashyap <k.chander@samsung.com>
+S:	Maintained
+F:	board/samsung/origen/
+F:	include/configs/origen.h
+F:	configs/origen_defconfig
diff -ruN u-boot-2018.07/board/samsung/x4412/Makefile u-boot-x4412/board/samsung/x4412/Makefile
--- u-boot-2018.07/board/samsung/x4412/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/board/samsung/x4412/Makefile	2018-09-25 18:18:12.000000000 +0800
@@ -0,0 +1,22 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# Copyright (C) 2011 Samsung Electronics
+#
+# Add by Wang.Yu 2018-09-25. Copy from samsung origen board.
+
+ifdef CONFIG_SPL_BUILD
+# necessary to create built-in.o
+obj- := __dummy__.o
+
+hostprogs-y := tools/mkx4412spl
+always := $(hostprogs-y)
+
+# omit -O2 option to suppress
+#   warning: dereferencing type-punned pointer will break strict-aliasing rules
+#
+# TODO:
+# Fix the root cause in tools/mkx4412spl.c and delete the following work-around
+$(obj)/tools/mkx4412spl: HOSTCFLAGS:=$(filter-out -O2,$(HOSTCFLAGS))
+else
+obj-y	+= x4412.o
+endif
diff -ruN u-boot-2018.07/board/samsung/x4412/tools/mkx4412spl.c u-boot-x4412/board/samsung/x4412/tools/mkx4412spl.c
--- u-boot-2018.07/board/samsung/x4412/tools/mkx4412spl.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/board/samsung/x4412/tools/mkx4412spl.c	2018-09-25 18:18:46.000000000 +0800
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2011 Samsung Electronics
+ * Add by Wang.Yu 2018-09-25. Copy from samsung origen board.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <sys/stat.h>
+
+#define BUFSIZE			(16*1024)
+#define IMG_SIZE		(16*1024)
+#define SPL_HEADER_SIZE		16
+#define FILE_PERM		(S_IRUSR | S_IWUSR | S_IRGRP \
+				| S_IWGRP | S_IROTH | S_IWOTH)
+#define SPL_HEADER		"S5PC210 HEADER  "
+/*
+* Requirement:
+* IROM code reads first 14K bytes from boot device.
+* It then calculates the checksum of 14K-4 bytes and compare with data at
+* 14K-4 offset.
+*
+* This function takes two filenames:
+* IN  "u-boot-spl.bin" and
+* OUT "$(BOARD)-spl.bin as filenames.
+* It reads the "u-boot-spl.bin" in 16K buffer.
+* It calculates checksum of 14K-4 Bytes and stores at 14K-4 offset in buffer.
+* It writes the buffer to "$(BOARD)-spl.bin" file.
+*/
+
+int main(int argc, char **argv)
+{
+	int i, len;
+	unsigned char buffer[BUFSIZE] = {0};
+	int ifd, ofd;
+	unsigned int checksum = 0, count;
+
+	if (argc != 3) {
+		printf(" %d Wrong number of arguments\n", argc);
+		exit(EXIT_FAILURE);
+	}
+
+	ifd = open(argv[1], O_RDONLY);
+	if (ifd < 0) {
+		fprintf(stderr, "%s: Can't open %s: %s\n",
+			argv[0], argv[1], strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	ofd = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, FILE_PERM);
+	if (ofd < 0) {
+		fprintf(stderr, "%s: Can't open %s: %s\n",
+			argv[0], argv[2], strerror(errno));
+		if (ifd)
+			close(ifd);
+		exit(EXIT_FAILURE);
+	}
+
+	len = lseek(ifd, 0, SEEK_END);
+	lseek(ifd, 0, SEEK_SET);
+
+	memcpy(&buffer[0], SPL_HEADER, SPL_HEADER_SIZE);
+
+	count = (len < (IMG_SIZE - SPL_HEADER_SIZE))
+		? len : (IMG_SIZE - SPL_HEADER_SIZE);
+
+	if (read(ifd, buffer + SPL_HEADER_SIZE, count) != count) {
+		fprintf(stderr, "%s: Can't read %s: %s\n",
+			argv[0], argv[1], strerror(errno));
+
+		if (ifd)
+			close(ifd);
+		if (ofd)
+			close(ofd);
+
+		exit(EXIT_FAILURE);
+	}
+
+	for (i = 0; i < IMG_SIZE - SPL_HEADER_SIZE; i++)
+		checksum += buffer[i+16];
+
+	*(unsigned long *)buffer ^= 0x1f;
+	*(unsigned long *)(buffer+4) ^= checksum;
+
+	for (i = 1; i < SPL_HEADER_SIZE; i++)
+		buffer[i] ^= buffer[i-1];
+
+	if (write(ofd, buffer, BUFSIZE) != BUFSIZE) {
+		fprintf(stderr, "%s: Can't write %s: %s\n",
+			argv[0], argv[2], strerror(errno));
+
+		if (ifd)
+			close(ifd);
+		if (ofd)
+			close(ofd);
+
+		exit(EXIT_FAILURE);
+	}
+
+	if (ifd)
+		close(ifd);
+	if (ofd)
+		close(ofd);
+
+	return EXIT_SUCCESS;
+}
diff -ruN u-boot-2018.07/board/samsung/x4412/x4412.c u-boot-x4412/board/samsung/x4412/x4412.c
--- u-boot-2018.07/board/samsung/x4412/x4412.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/board/samsung/x4412/x4412.c	2018-09-25 18:18:13.000000000 +0800
@@ -0,0 +1,36 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2011 Samsung Electronics
+ * Add by Wang.Yu 2018-09-25. Copy from samsung origen board.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/mmc.h>
+#include <asm/arch/periph.h>
+#include <asm/arch/pinmux.h>
+#include <usb.h>
+
+u32 get_board_rev(void)
+{
+	return 0;
+}
+
+int exynos_init(void)
+{
+	return 0;
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	return 0;
+}
+
+#ifdef CONFIG_BOARD_EARLY_INIT_F
+int exynos_early_init_f(void)
+{
+	return 0;
+}
+#endif
diff -ruN u-boot-2018.07/common/board_f.c u-boot-x4412/common/board_f.c
--- u-boot-2018.07/common/board_f.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/common/board_f.c	2018-09-26 18:02:30.102898104 +0800
@@ -38,6 +38,7 @@
 #include <asm/sections.h>
 #include <dm/root.h>
 #include <linux/errno.h>
+#include <debug_uart.h>
 
 /*
  * Pointer to initial global data area
@@ -894,6 +895,7 @@
 
 void board_init_f(ulong boot_flags)
 {
+	printascii("Uboot running.\r\n");
 	gd->flags = boot_flags;
 	gd->have_console = 0;
 
diff -ruN u-boot-2018.07/configs/x4412_defconfig u-boot-x4412/configs/x4412_defconfig
--- u-boot-2018.07/configs/x4412_defconfig	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/configs/x4412_defconfig	2018-09-26 18:05:44.512507997 +0800
@@ -0,0 +1,15 @@
+CONFIG_ARM=y
+CONFIG_ARCH_EXYNOS=y
+CONFIG_TARGET_X4412=y
+CONFIG_DEFAULT_DEVICE_TREE="exynos4412-x4412"
+CONFIG_SPL=y
+CONFIG_SYS_PROMPT="X4412 # "
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_XIMG is not set
+# CONFIG_CMD_FPGA is not set
+# CONFIG_CMD_NET is not set
+# CONFIG_CMD_NFS is not set
+# CONFIG_CMD_MISC is not set
+CONFIG_OF_CONTROL=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
diff -ruN u-boot-2018.07/drivers/serial/serial_s5p.c u-boot-x4412/drivers/serial/serial_s5p.c
--- u-boot-2018.07/drivers/serial/serial_s5p.c	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/drivers/serial/serial_s5p.c	2018-09-26 18:06:56.996225157 +0800
@@ -62,12 +62,14 @@
 static void __maybe_unused s5p_serial_init(struct s5p_uart *uart)
 {
 	/* enable FIFOs, auto clear Rx FIFO */
-	writel(0x3, &uart->ufcon);
+	//writel(0x3, &uart->ufcon);
+	writel(0x111, &uart->ufcon);
 	writel(0, &uart->umcon);
 	/* 8N1 */
 	writel(0x3, &uart->ulcon);
 	/* No interrupts, no DMA, pure polling */
-	writel(0x245, &uart->ucon);
+	//writel(0x245, &uart->ucon);
+	writel(0x3c5, &uart->ucon);
 }
 
 static void __maybe_unused s5p_serial_baud(struct s5p_uart *uart, uint uclk,
diff -ruN u-boot-2018.07/include/configs/x4412.h u-boot-x4412/include/configs/x4412.h
--- u-boot-2018.07/include/configs/x4412.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-x4412/include/configs/x4412.h	2018-09-26 18:20:32.221785922 +0800
@@ -0,0 +1,137 @@
+/* Copyright (C) 2011 Samsung Electronics
+ *
+ * Configuration settings for the SAMSUNG X4412 (EXYNOS4412) board.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ * Add by Wang.Yu 2018-09-26.
+ */
+
+#ifndef __CONFIG_X4412_H
+#define __CONFIG_X4412_H
+
+#include <configs/exynos4-common.h>
+
+/* High Level Configuration Options */
+#define CONFIG_X4412			1
+
+#define CONFIG_SPL_SERIAL_SUPPORT
+#define CONFIG_SPL_GPIO_SUPPORT
+#define CONFIG_DEBUG_UART
+#define CONFIG_DEBUG_UART_S5P
+#define CONFIG_DEBUG_UART_BASE 		0x13800000	/* UART0 base address  */
+#define CONFIG_DEBUG_UART_CLOCK 	(100000000)	/* SCLK_UART0 is 100MHz  */
+
+#define CONFIG_SYS_DCACHE_OFF		1
+
+/* ORIGEN has 4 bank of DRAM */
+#define CONFIG_NR_DRAM_BANKS		4
+#define CONFIG_SYS_SDRAM_BASE		0x40000000
+#define PHYS_SDRAM_1			CONFIG_SYS_SDRAM_BASE
+#define SDRAM_BANK_SIZE			(256 << 20)	/* 256 MB */
+
+/* memtest works on */
+#define CONFIG_SYS_MEMTEST_START	CONFIG_SYS_SDRAM_BASE
+#define CONFIG_SYS_MEMTEST_END		(CONFIG_SYS_SDRAM_BASE + 0x6000000)
+#define CONFIG_SYS_LOAD_ADDR		(CONFIG_SYS_SDRAM_BASE + 0x3E00000)
+#define CONFIG_SYS_TEXT_BASE		0x43E00000
+#define CONFIG_MACH_TYPE		MACH_TYPE_X4412
+
+/* select serial console configuration */
+#define CONFIG_SERIAL2
+#define CONFIG_BAUDRATE			115200
+
+/* Console configuration */
+#define CONFIG_SYS_CONSOLE_INFO_QUIET
+#define CONFIG_SYS_CONSOLE_IS_IN_ENV
+#define CONFIG_DEFAULT_CONSOLE		"console=ttySAC1,115200n8\0"
+
+#define CONFIG_SYS_MEM_TOP_HIDE		(1 << 20)	/* ram console */
+#define CONFIG_SYS_MONITOR_BASE		0x00000000
+
+/* Power Down Modes */
+#define S5P_CHECK_SLEEP			0x00000BAD
+#define S5P_CHECK_DIDLE			0xBAD00000
+#define S5P_CHECK_LPA			0xABAD0000
+
+#undef CONFIG_CMD_PING
+#define CONFIG_CMD_ELF
+#define CONFIG_CMD_DHCP
+#define CONFIG_CMD_EXT2
+#define CONFIG_CMD_FS_GENERIC
+#define CONFIG_CMD_BOOTZ
+#define CONFIG_SUPPORT_RAW_INITRD
+
+/* MMC SPL */
+#define COPY_BL2_FNPTR_ADDR		0x02020030
+/* Because bl1 will copy bl2(spl) to iram address 0x02023400 */
+#define CONFIG_SPL_TEXT_BASE		0x02023400
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"loadaddr=0x40007000\0" \
+	"rdaddr=0x48000000\0" \
+	"kerneladdr=0x40007000\0" \
+	"ramdiskaddr=0x48000000\0" \
+	"console=ttySAC2,115200n8\0" \
+	"mmcdev=0\0" \
+	"bootenv=uEnv.txt\0" \
+	"loadbootenv=load mmc ${mmcdev} ${loadaddr} ${bootenv}\0" \
+	"importbootenv=echo Importing environment from mmc ...; " \
+		"env import -t $loadaddr $filesize\0" \
+		"loadbootscript=load mmc ${mmcdev} ${loadaddr} boot.scr\0" \
+		"bootscript=echo Running bootscript from mmc${mmcdev} ...; " \
+				"source ${loadaddr}\0"
+#define CONFIG_BOOTCOMMAND \
+	"if mmc rescan; then " \
+		"echo SD/MMC found on device ${mmcdev};" \
+		"if run loadbootenv; then " \
+			"echo Loaded environment from ${bootenv};" \
+			"run importbootenv;" \
+		"fi;" \
+		"if test -n $uenvcmd; then " \
+			"echo Running uenvcmd ...;" \
+			"run uenvcmd;" \
+		"fi;" \
+		"if run loadbootscript; then " \
+			"run bootscript; " \
+		"fi; " \
+	"fi;" \
+	"load mmc ${mmcdev} ${loadaddr} uImage; bootm ${loadaddr} "
+
+#define CONFIG_IDENT_STRING		" for X4412"
+#define CONFIG_CLK_1000_400_200
+
+/* MIU (Memory Interleaving Unit) */
+#define CONFIG_MIU_2BIT_21_7_INTERLEAVED
+
+/*
+ * SD MMC layout:
+ * +------+-------------------------------------------------------------+
+ * |									|
+ * |	  |	      |		   |	   	  |		   	|
+ * | 512B |  8K(bl1)  |16k(bl2/spl)|   16k(ENV)   |  	512k(u-boot)	|
+ * | 	  |	      |		   | 	   	  |		   	|
+ * |								    	|
+ * +------+-------------------------------------------------------------+
+ *
+ */
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV		0
+#define CONFIG_ENV_SIZE			(16 <;< 10)	/* 16 KB */
+#define RESERVE_BLOCK_SIZE		(512)
+#define BL1_SIZE			(8 <;< 10)  /*16 K reserved for BL1*/
+#define BL2_SIZE			(16 <;< 10) /*16 k reserved for BL2*/
+#define CONFIG_ENV_OFFSET		(RESERVE_BLOCK_SIZE + BL1_SIZE + BL2_SIZE)
+
+#define CONFIG_SPL_LDSCRIPT		"board/samsung/common/exynos-uboot-spl.lds"
+#define CONFIG_SPL_MAX_FOOTPRINT	(14 * 1024)
+
+#define CONFIG_SYS_INIT_SP_ADDR		0x02040000
+
+/* U-boot copy size from boot Media to DRAM.*/
+#define COPY_UBOOT_SIZE			0x80000
+#define UBOOT_START_OFFSET		((CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE)/512)
+#define UBOOT_SIZE_BLOC_COUNT		(COPY_UBOOT_SIZE/512)
+
+/* #define UBOOT_DEBUG_20151226 */
+
+#endif	/* __CONFIG_H */
diff -ruN u-boot-2018.07/Makefile u-boot-x4412/Makefile
--- u-boot-2018.07/Makefile	2018-07-09 22:24:14.000000000 +0800
+++ u-boot-x4412/Makefile	2018-09-26 18:22:33.266589044 +0800
@@ -241,7 +241,7 @@
 
 # set default to nothing for native builds
 ifeq ($(HOSTARCH),$(ARCH))
-CROSS_COMPILE ?=
+CROSS_COMPILE = arm-linux-
 endif
 
 KCONFIG_CONFIG	?= .config
